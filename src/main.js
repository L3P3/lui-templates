import {
	readFileSync,
} from 'fs';
import {
	readdir,
	stat,
} from 'fs/promises';
import {dirname} from 'path';
import {fileURLToPath} from 'url';

import {
	generate,
	list_generate,
} from './generator.js';
import {parse} from './parser.js';

const __dirname = dirname(fileURLToPath(import.meta.url));
const version = JSON.parse(
	readFileSync(__dirname + '/../package.json', 'utf8')
).version;

const options_default = {
	lui_name: 'lui',
	components_name: './components.js',
};

export default async function lui_templates(path, options = {}) {
	options = {
		...options_default,
		...options,
	};
	const is_directory = (await stat(path)).isDirectory();

	const paths = is_directory
	?	(await readdir(path)).map(name => `${path}/${name}`)
	:	[path];

	const all_parsed = await Promise.all(paths.map(parse));

	// console.log('parsed', JSON.stringify(all_parsed, null, 2));

	const lui_imports = new Set();
	const component_imports = new Set();
	const result = [];

	for (const [name, parsed] of all_parsed) {
		const expression = generate(name, parsed, lui_imports, component_imports);

		result.push(
			'export ' +
			(is_directory ? '' : 'default ') +
			expression
		);
	}

	// write component_imports to the top of the file
	for (const [name] of all_parsed) {
		component_imports.delete(name);
	}
	if (component_imports.size > 0) {
		result.unshift(`import {${
			list_generate([...component_imports], 0)
		}} from ${JSON.stringify(components_name)};`);
	}

	// write lui_imports to the top of the file
	result.unshift(`import {${
		list_generate([...lui_imports], 0)
	}} from ${JSON.stringify(lui_name)};`);

	result.unshift('// generated by lui-templates ' + version);

	return result.join('\n\n') + '\n';
}
